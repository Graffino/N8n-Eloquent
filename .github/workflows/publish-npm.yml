name: Publish to npm
run-name: "${{ github.repository }} -> npm by ${{ github.actor }}"

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  publish-npm:
    runs-on: [self-hosted, graffino, node18]

    environment: Production
    env:
      PACKAGE_NAME: n8n-eloquent
      PACKAGE_PATH: n8n-extension
      NPM_REGISTRY: https://registry.npmjs.org/

    permissions:
      contents: read
      packages: write
      id-token: write
      actions: write

    steps:
      - name: Checkout
        id: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        if: success()

      - name: Get version
        id: Get-Version
        run: |
          VERSION_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v2.1.0")
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          VERSION_NO=${VERSION_TAG#v}
          echo "VERSION_NO=$VERSION_NO" >> $GITHUB_ENV
          echo "version=$VERSION_NO" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: '${{ env.NPM_REGISTRY }}'
          cache: 'npm'
          cache-dependency-path: '${{ env.PACKAGE_PATH }}/package-lock.json'

      - name: Install dependencies
        run: |
          cd ${{ env.PACKAGE_PATH }}
          npm ci

      - name: Build package
        run: |
          cd ${{ env.PACKAGE_PATH }}
          npm run build

      - name: Verify build output
        run: |
          cd ${{ env.PACKAGE_PATH }}
          ls -la dist/
          ls -la dist/nodes/
          ls -la dist/credentials/

      - name: Update package version
        run: |
          cd ${{ env.PACKAGE_PATH }}
          npm version ${{ steps.Get-Version.outputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: |
          cd ${{ env.PACKAGE_PATH }}
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.PACKAGE_PATH }}/dist/**/*
            ${{ env.PACKAGE_PATH }}/package.json
            ${{ env.PACKAGE_PATH }}/README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowId = 'publish-npm.yml';
            const { owner, repo } = context.repo;
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id: workflowId
            });
            const runsToKeep = new Set([context.runId, ...workflow_runs
              .sort((a, b) => b.id - a.id)
              .slice(0, 4)
              .map(run => run.id)
            ]);
            for (const { id } of workflow_runs) {
              if (!runsToKeep.has(id)) {
                await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: id })
                  .then(() => console.log(`Deleted run ${id}`))
                  .catch(error => console.error(`Failed to delete run ${id}: ${error.message}`));
              }
            }
